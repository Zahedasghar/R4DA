---
title: "[Introduction to R]{.flow}"
subtitle: "[PERI, Lahore]{style=color:red;}"
author: "[ZAHID ASGHAR, School of Economics, QAU]{.adage}"
format:
  revealjs:
    logo: "unicef.jpg"
    css: [stat20.css, slides.scss, styles.scss]
    docs: true
    chalkboard: true
    keep-md: false
    title-slide-attributes:
      data-background-image: lahore.jpg
      data-background-size: contain
      data-background-opacity: 30%
execute: 
  freeze: auto

editor: visual

---

```{r}
#| echo: false
library(tidyverse)
library(kableExtra)
```
- - -

```{r echo = FALSE, out.width="20%"}
knitr::include_graphics("https://community.rstudio.com/uploads/default/optimized/2X/9/90920a5ec14e0547a22db647ea025e8dc63d2aff_2_1024x537.jpeg")
```

:::{.center .adage}
 Data Analytics with R 
:::
 Zahid Asghar


- - -


```{r echo = FALSE, out.width="65%"}
knitr::include_graphics("assets/images/r-project.png")
```

**R language**: an open-source language for statistical computing.


## This is where R lives in RStudio

```{r echo = FALSE, out.width="85%"}
knitr::include_graphics("assets/images/hopr_0101.png")
```


## R as a Calculator {.scrollable}
::: {.columns}
::: {.column width="50%"}
demo

???

Demonstrate +, -, *, /, ^ at the console.


R allows all of the standard arithmetic operations.


**Addition**
```{r echo = TRUE}
1 + 2
```

**Subtraction**
```{r echo = TRUE}
1 - 2
```

:::
:::{.column width='50%'}

**Multiplication**
```{r echo = TRUE}
1 * 2 
```

**Division**
```{r echo = TRUE}
1 / 2
```

:::
:::



## R as a calculator, cont.

R allows all of the standard arithmetic operations.

::: {.column}
::: {.column width="50%"}

**Exponents**
```{r echo = TRUE}
2 ^ 3
```
:::

::: {.column width="50%"}


**Parentheses for Order of Ops.** 

```{r echo = TRUE}
2 ^ 3 + 1
```

```{r echo = TRUE}
2 ^ (3 + 1)
```

:::
:::


## Saving Objects

When you type a line of code (here: math) at the console and press `enter`, R will:

1. Run the code / evaluate the expression
2. *Print* the output to the console


If instead you want R to

1. Run the code / evaluate the expression
2. Save the output to an *object*

- - -

You can use the **assignment operator**.

```{r echo = TRUE, eval = FALSE}
<-
```


## Saving objects

demo

???

Run stuff like `a <- 1 + 2`, `b <- 2 * 3`, and `a + b`, `a + 1`.


## Saving objects




```{r echo = FALSE, out.width="85%", fig.align='center'}
knitr::include_graphics("assets/images/hopr_0102.png")
```



## Naming objects

In order to be recognized as a valid object name, you have to certain conventions; namely, the object name should begin with a letter.

```{r}
library(knitr)
library(kableExtra)
tibble(`good names` = c("a", "b", "FOO", "my_var"), `names that cause errors` = c("1trial", "$", "^mean", "my var")) %>%
  kbl()
```


- - - 

What will happen here?

```{r eval = FALSE, echo = TRUE}
a <- 1 + 2
a + 1
```

```{task}
Answer at `PollEv.com/zahidasghar349`.
```


<center>
<iframe src="https://embed.polleverywhere.com/multiple_choice_polls/xHREV2UiheaEaavBoEAsX?controls=none&short_poll=true" width="800px" height="600px"></iframe></center>

- - -

What will happen here?

```{r eval = TRUE, echo = TRUE}
a <- 1 + 2
a + 1
```



To update an object, you can overwrite it by assigning it to the same name.



```{r update_a, echo = TRUE, eval = FALSE}
a <- 1 + 2
a <- a + 1
a
```




## Creating a Vector

One of the core data structure in R is the *vector*, a one-dimensional ordered set of values.

 You can create a vector using a function called `c()` for *combine* or *concatenate*.


## Creating a Vector

One of the core data structure in R is the *vector*, a one-dimensional ordered set of values. You can create a vector using a function called `c()` for *combine* or *concatenate*.
 
```{r echo = TRUE}
c(1, 2, 3)
```



```{r echo = TRUE}
a <- c(1, 2, 3)
```


## Math on Vectors


Arithmetic on vectors happens element-by-element.

::: {.columns}
:::{.column width='50%'} 

```{r}
knitr::include_graphics("assets/images/vector-math.png")
```
:::
:::{.column width='50%'}

```{r echo = TRUE}
a <- c(1, 2, 3, 4, 5, 6)
b <- c(1, 2, 3, 4, 5, 6)
a * b
```
:::
:::


## Functions


You can do operations on R objects by using *functions*.

![](assets/images/stat20-sketch-12.jpg){.center}


## Functions

You can do operations on R objects by using *functions*.

![](assets/images/stat20-sketch-13.jpg){.center}


## Functions

You can do operations on R objects by using *functions*. 

> Each function has a name followed by parentheses.

![](assets/images/stat20-sketch-14.jpg){.center}


## Functions

You can do operations on R objects by using *functions*. 

> Inside the parenthesis you put the object you'd like to operate on, called the *argument* of the function.

![](assets/images/stat20-sketch-15.jpg){.center}


## Functions

You can do operations on R objects by using *functions*. 

> When you provide the argument to the function and run it, you can capture the output with an object (or print it to the console).

??? 

Demo running this line of code, then running `?mean`


## Getting help


One of the most useful commands in R is `?`.

:::{.columns}
:::{.column width='50%'}

```{r echo = TRUE, eval = FALSE}
?mean
```

```{r, out.width="80%"}
knitr::include_graphics("assets/images/help-mean.png")
```

:::
:::{.column width='50%'}


Look for:
- Which arguments are available
- What kind of output the function will return (called the "Value")
- Look at the examples at the bottom

:::
:::

- - -


??? 

Demo

a <- c(-5, 2, 3, 4, 5, 6, 7, 8, 9, 100) 

mean(a) 

mean(a, trim = .1) 

a_no_extremes <- c(2, 3, 4, 5, 6, 7, 8, 9) 

mean(a_no_extremes)


## Multiple arguments

```{r echo = TRUE}
a <- c(-5, 2, 3, 4, 5, 6, 7, 8, 9, 100)
mean(x = a, trim = .1)
```

A few notes:



1. Functions can take multiple arguments separated by a comma: `,`



2. Arguments have names that you can specify or leave blank



3. Some arguments have default values that will be used if you specify something different



## So many functions...

There are many functions in R, most of them named sensibly.

```{r echo = TRUE}
a <- c(1, 2, 3, 4)
mean(a)
sum(a)
length(a)
```

 
 
## Functions on vectors


Many of them will operate element-by-element if given a vector argument.



```{r echo = TRUE}
a <- c(1, 2, 3, 4)
sqrt(a)
log(a)
abs(a)
```



Note: `log()` is the natural log by default (log base $e = 2.71$).


## What will happen here?

```{r eval = FALSE, echo = TRUE}
a <- c(1, 2, 3, 4)
sqrt(log(a))
```

```{task}
Answer at `PollEv.com/zahidasghar349`.

```



<center>
<iframe src="https://embed.polleverywhere.com/multiple_choice_polls/oqF9U8G8xfOerNeTaYGN5?controls=none&short_poll=true" width="800px" height="600px"></iframe>
</center>

- - - 

What will happen here?

```{r eval = TRUE, echo = TRUE}
a <- c(1, 2, 3, 4)
sqrt(log(a))
```



Functions can be *nested* and will evaluate from the inside out.




Every vector in R has a *type* that defines the way that it is stored and a *class* that determines how it will behave.

## Common classes of vectors: `numeric`


You can ask R for the class of an object using the `class()` function.


```{r echo = TRUE}
a <- c(1, 2, 3)
class(a)
```

. . .

`numeric` objects map directly to *numeric variables*, with no strong distinction between continuous and discrete.

. . .

 You may also see related types such as `integer` and `dbl` (for double precision).


## Common classes of vectors: `character`


`character` vectors contain *strings*, identified by being enclosed in quotation marks.

```{r echo = TRUE}
greetings <- c("hello", "hola", "ni hao", "heisann")
greetings
```

- - -

```{r echo = TRUE}
greetings <- c("hello", "hola", "ni hao", "heisann")
toupper(greetings)
```



## Common classes of vectors: `factor` {.scrollable}


`factor` vectors contain categorical data where we expect there to be multiple observations at the same level. You will find them often in pre-loaded data set but you can construct them using `factor()`.

```{r echo = TRUE}
greetings <- factor(c("hello", "hello", "ni hao"))
greetings
```

--

```{r echo = TRUE}
class(greetings)
```


`factor` is a natural class for *categorical variables*.



## Building a data frame

You can combine vectors into a data frame using the `tibble()` function from the extension library of R that we'll be using called the `tidyverse`.

```{r echo = TRUE}
bill_depth_mm <- c(15.0, 17.1, 18.7, 18.9)
bill_length_mm <- c(47.5, 40.2, 39.0, 35.3)
species <- c("Gentoo", "Adelie", "Adelie", "Adelie")
```


```{r echo = TRUE}
library(tidyverse)
penguins_df <- tibble(bill_depth_mm, bill_length_mm, species)
```


## The penguins data frame


```{r echo = TRUE}
penguins_df
```


- - -



```{r echo = FALSE}
knitr::include_graphics("assets/images/r_first_then.png")
```

